" set nocompatible              " be iMproved, required
" filetype off                  " required


" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" "	VUNDLE 
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " - set the runtime path to include Vundle and initialize
" set rtp+=~/.vim/bundle/Vundle.vim
" call vundle#begin()
" Plugin 'VundleVim/Vundle.vim'
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" " - Awesome plugins:
" Plugin 'tpope/vim-fugitive'
" Plugin 'ayu-theme/ayu-vim'
" Plugin 'scrooloose/nerdtree'
" Plugin 'bling/vim-bufferline'
" "Plugin 'scrooloose/syntastic'
" Plugin 'junegunn/fzf'
" Plugin 'neovim/nvim-lspconfig'
" Plugin 'kabouzeid/nvim-lspinstall'

" Plugin 'nvim-lua/plenary.nvim'
" Plugin 'nvim-telescope/telescope.nvim'
" Plugin 'nvim-telescope/telescope-fzf-native.nvim'

" Plugin 'chriskempson/base16-vim'

" " Plugin 'vim-airline/vim-airline'
" " Plugin 'vim-airline/vim-airline-themes'

" " - Tabnine
" " Plugin 'zxqfl/tabnine-vim'
" call vundle#end()

" call plug#begin('~/.vim/plugged')
" "Plug 'neovim/nvim-lspconfig'
" "Plug 'mhinz/vim-startify'
" Plug 'karb94/neoscroll.nvim'
" Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}


" " - Plugin nvim-cmp related:
" Plug 'neovim/nvim-lspconfig'
" Plug 'hrsh7th/cmp-nvim-lsp'
" Plug 'hrsh7th/cmp-buffer'
" Plug 'hrsh7th/cmp-path'
" Plug 'hrsh7th/cmp-cmdline'
" Plug 'hrsh7th/nvim-cmp'

" Plug 'nvim-lualine/lualine.nvim'

" Plug 'akinsho/bufferline.nvim'

" Plug 'kyazdani42/nvim-web-devicons'
" Plug 'kyazdani42/nvim-tree.lua'

" call plug#end()

" "require'lspconfig'.pyls.setup{autostart = true}

" " - Configure nvim-cmp plugin
" set completeopt=menu,menuone,noselect

" lua <<EOF
"   -- Setup nvim-cmp.
"   local cmp = require'cmp'

"   cmp.setup({
"     snippet = {
"       -- Specify a snippet engine
"       expand = function(args)
"         vim.fn["vsnip#anonymous"](args.body)
"       end,
"     },
"     mapping = {
"       ['<C-d>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
"       ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
"       ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
"       ['<C-y>'] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
"       ['<C-e>'] = cmp.mapping({
"         i = cmp.mapping.abort(),
"         c = cmp.mapping.close(),
"       }),
"       ['<CR>'] = cmp.mapping.confirm({ select = true }),
"     },
"     sources = cmp.config.sources({
"       { name = 'nvim_lsp' },
"       { name = 'vsnip' },
"     }, {
"       { name = 'buffer' },
"     })
"   })

"   -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
"   cmp.setup.cmdline('/', {
"     sources = {
"       { name = 'buffer' }
"     }
"   })

"   -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
"   cmp.setup.cmdline(':', {
"     sources = cmp.config.sources({
"       { name = 'path' }
"     }, {
"       { name = 'cmdline' }
"     })
"   })

"   -- Setup lspconfig.
"   local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
  
"   require'neoscroll'.setup()
"   require'lspinstall'.setup()
  
"   local servers = require'lspinstall'.installed_servers()
"   for _, server in pairs(servers) do
"     require'lspconfig'[server].setup{
"       capabilities = capabilities
"     }
"   end

"   require('telescope').setup{
"     defaults = {
"       -- ...
"     },
"     pickers = {
"       find_files = {
"         theme = "dropdown",
"       }
"     },
"     extensions = {
"       -- ...
"     }
"   }

"   -- Configure Tree-sitter
"   require'nvim-treesitter.configs'.setup {
"     ensure_installed = "maintained",
"     sync_install = false,
"     ignore_install = { "java" },
"     highlight = {
"       enable = true,
"       disable = { "java" },
"       additional_vim_regex_highlighting = false,
"     },
"   }

"   require'lualine'.setup {
"     options = {
"       icons_enabled = true,
"       theme = 'ayu',
"       component_separators = { left = '', right = ''},
"       section_separators = { left = '', right = ''},
"       disabled_filetypes = {},
"       always_divide_middle = true,
"     },
"     sections = {
"       lualine_a = {'mode'},
"       lualine_b = {'branch', 'diff',
"                     {'diagnostics', sources={'nvim_lsp'}}},
"       lualine_c = {'filename'},
"       lualine_x = {'encoding', 'filetype'},
"       lualine_y = {'progress'},
"       lualine_z = {'location'}
"     },
"     inactive_sections = {
"       lualine_a = {},
"       lualine_b = {},
"       lualine_c = {'filename'},
"       lualine_x = {'location'},
"       lualine_y = {},
"       lualine_z = {}
"     },
"     tabline = {},
"     extensions = {}
"   }

"   require'nvim-web-devicons'.setup {
"     default = true;
"   }

"   require'bufferline'.setup {
"     options = {
"       close_command = "bdelete! %d",
"       right_mouse_command = "bdelete! %d",
"       left_mouse_command = "buffer %d",
"       indicator_icon = '▎',
"       buffer_close_icon = 'x',
"       modified_icon = '●',
"       close_icon = '',
"       left_trunc_marker = '',
"       right_trunc_marker = '',
"       max_name_length = 18,
"       tab_size = 25,
"       diagnostics = "nvim_lsp",
"       diagnostics_update_in_insert = false,
"       offsets = {{filetype = "NvimTree", text = "File Explorer", text_align = "left"}},
"       always_show_bufferline = true,
"     }
"   }

" require'nvim-tree'.setup()

" EOF


" " - Telescope configurateion:
" nnoremap <leader>ff <cmd>Telescope find_files<cr>
" nnoremap <leader>fg <cmd>Telescope live_grep<cr>
" nnoremap <leader>fb <cmd>Telescope buffers<cr>
" nnoremap <leader>fh <cmd>Telescope help_tags<cr>


" set wildmenu




" filetype plugin indent on    " required


" " " Ayu color scheme
" set termguicolors     " enable true colors support
" "let ayucolor="light"  " for light version of theme
" "let ayucolor="mirage" " for mirage version of theme
" let ayucolor="dark"   " for dark version of theme
" colorscheme ayu


" let base16colorspace=256
" colorscheme base16-default-dark


" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" "	AIRLINE
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " let g:airline#extensions#tabline#enabled = 1
" " let g:airline#extensions#tabline#formatter = 'unique_tail'
" " let g:airline#extensions#tabline#left_sep = ' '
" " let g:airline#extensions#tabline#left_alt_sep = '|'
" " let airline_section_c = ''


" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" "	NERDTREE
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " Start NERDTree and put the cursor back in the other window.
" autocmd VimEnter * NERDTree | wincmd p
" " Exit Vim if NERDTree is the only window remaining in the only tab.
" autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" " If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
" autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
"     \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif


" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" "	Startify
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " returns all modified files of the current git repo
" " `2>/dev/null` makes the command fail quietly, so that when we are not
" " in a git repo, the list will be empty
" function! s:gitModified()
"     let files = systemlist('git ls-files -m 2>/dev/null')
"     return map(files, "{'line': v:val, 'path': v:val}")
" endfunction

" " same as above, but show untracked files, honouring .gitignore
" function! s:gitUntracked()
"     let files = systemlist('git ls-files -o --exclude-standard 2>/dev/null')
"     return map(files, "{'line': v:val, 'path': v:val}")
" endfunction

" let g:startify_lists = [
"         \ { 'type': 'files',     'header': ['   MRU']            },
"         \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
"         \ { 'type': 'sessions',  'header': ['   Sessions']       },
"         \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
"         \ { 'type': function('s:gitModified'),  'header': ['   git modified']},
"         \ { 'type': function('s:gitUntracked'), 'header': ['   git untracked']},
"         \ { 'type': 'commands',  'header': ['   Commands']       },
"         \ ]





" set t_Co=256
" syntax enable
" "set backspace=indent,eol,start
" set number relativenumber       " show numers of lines
" set ruler				        " 
" set colorcolumn=80		        " highlight 80 row
" set mouse=a				        " full mouse support
" set expandtab				    " convert tabs into spaces
" set tabstop=4				    " number of visual spaces per TAB
" set softtabstop=4			    " number of spaces in tab when editing
" set showcmd				        " show command in bottom bar
" set cursorline				    " highlight current line
" set wildmenu				    " visual autocomplete for command menu
" set showmatch                   " highlight matching [{()}]

" set incsearch                   " search as characters are entered
" set hlsearch                    " highlight matches


" " move vertically by visual line
" "nnoremap j gj
" "nnoremap k gk

" " move to beginning/end of line
" "nnoremap B ^
" "nnoremap E $



" " mouse scroll per one line up and down
" "map <ScrollWheelUp> <C-Y>
" "map <ScrollWheelDown> <C-E>


" ":so ~/.vim/my/cursor.vim


" "" 4 spaces for 'Tab' for >> or <<
" "set shiftwidth=4
" "" set showcmd
" "" set wildmenu
" "" set visualbell
" "" set ruler
" "" set nocompatible
" set encoding=utf-8
" "" set wrap
" "" set textwidth=79
" "" set formatoptions=tcqrn1
" "" set listchars=tab:▸\ ,eol:¬
" "" "
" "" " " set tabs to have 4 spaces
" "" set ts=4
" "" "
" "" " " indent when moving to the next line while writing code
" "" set autoindent
" "" "
" "" " " expand tabs into spaces
" "" set expandtab
" "" set noshiftround
" "" set ttyfast
" "" set laststatus=2
" "" set showmode
" "" 
" "" "
" "" " " show a visual line under the cursor's current line
" "" set cursorline
" "" "
" "" " " show the matching part of the pair for [] {} and ()
" "" set showmatch
" "" set lazyredraw
" "" set incsearch
" "" set hlsearch
" "" set foldenable
" "" set foldlevelstart=10
" "" set foldnestmax=10
" "" set foldmethod=indent
" "" 
" "" set background=dark
" "" "
" "" " " enable full mouse support
" "" set mouse=a
" "" " " enable all Python syntax highlighting features
" "" let python_highlight_all = 1
" "" set secure
" "" 
" "" " " enable highlighting on overlimit rule
" "" set colorcolumn=80
" "" "highlight OverLength ctermbg=red ctermfg=white guibg=#592929
" "" "match OverLength /\%100v.\+/
" "" 
" "" " " change cursor shape in different modes
" "" " " default for visual, line for insert mods
" "let &t_SI = "\<Esc>]50;CursorShape=1\x7"
" "let &t_SR = "\<Esc>]50;CursorShape=2\x7"
" "let &t_EI = "\<Esc>]50;CursorShape=0\x7"


" "nnoremap n nzzzv
" "nnoremap N Nzzzv

